&НаКлиенте
Перем ИдентификаторКомпоненты, ВнешняяКомпонента;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	АдресВебКлиента = "https://github.com/lintest/1cWinCtrl";
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	МакетКомпоненты = ОбработкаОбъект.ПолучитьМакет("_1cWinCtrl");
	ТекстJavaScript = ОбработкаОбъект.ПолучитьМакет("JavaScript").ПолучитьТекст();
	МестоположениеКомпоненты = ПоместитьВоВременноеХранилище(МакетКомпоненты, УникальныйИдентификатор);
	
	РазмерПоГоризонтали = 1280;
	РазмерПоВертикали = 960;
	ПортПодключения = 48000;
	ПортБраузера = 9222;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ИдентификаторКомпоненты = "_" + СтрЗаменить(Новый УникальныйИдентификатор, "-", "");
	ВыполнитьПодключениеВнешнейКомпоненты(Истина);
	НайтиБраузер("%ProgramFiles%", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиБраузер(ПапкаПоиска, ПродолжитьПоиск = Ложь)
	
	СисИнфо = Новый СистемнаяИнформация;
	Если СисИнфо.ТипПлатформы = ТипПлатформы.Windows_x86 ИЛИ СисИнфо.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
		Попытка
			Shell = Новый COMОбъект("WScript.Shell");
		    ProgramFiles = Shell.ExpandEnvironmentStrings(ПапкаПоиска);   	
			ИмяФайла = "\Google\Chrome\Application\chrome.exe";
			Файл = Новый Файл(ProgramFiles + ИмяФайла);
			ДополнительныеПараметры = Новый Структура("ПолноеИмя,ПродолжитьПоиск", Файл.ПолноеИмя, ПродолжитьПоиск);
			ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаСуществованияФайла", ЭтотОбъект, ДополнительныеПараметры);
			Файл.НачатьПроверкуСуществования(ОписаниеОповещения);
		Исключение
			//Ничего не делаем
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ПроверкаСуществованияФайла(Существует, ДополнительныеПараметры) Экспорт
	
	Если Существует Тогда
		ИнтернетБраузер = ДополнительныеПараметры.ПолноеИмя;
	ИначеЕсли ДополнительныеПараметры.ПродолжитьПоиск Тогда
		НайтиБраузер("%ProgramFiles(x86)%", Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПодключениеВнешнейКомпоненты(ДополнительныеПараметры) Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПодключениеВнешнейКомпонентыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	НачатьПодключениеВнешнейКомпоненты(ОписаниеОповещения, МестоположениеКомпоненты, ИдентификаторКомпоненты, ТипВнешнейКомпоненты.Native); 
	
КонецПроцедуры	

&НаКлиенте
Процедура ПодключениеВнешнейКомпонентыЗавершение(Подключение, ДополнительныеПараметры) Экспорт
	
	Если Подключение Тогда
		ВнешняяКомпонента = Новый("AddIn." + ИдентификаторКомпоненты + ".WindowsControl");
		ОписаниеОповещения = Новый ОписаниеОповещения("ПолученаВерсияКомпоненты", ЭтотОбъект);
		ВнешняяКомпонента.НачатьПолучениеВерсия(ОписаниеОповещения);
	ИначеЕсли ДополнительныеПараметры = Истина Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьПодключениеВнешнейКомпоненты", ЭтотОбъект, Ложь);
		НачатьУстановкуВнешнейКомпоненты(ОписаниеОповещения, МестоположениеКомпоненты);
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ПолученаВерсияКомпоненты(Значение, ДополнительныеПараметры) Экспорт
	
	Заголовок = "Управление окнами, версия " + Значение;
	
КонецПроцедуры	

&НаКлиенте
Функция ПрочитатьСтрокуJSON(ТекстJSON)
	
	Если ПустаяСтрока(ТекстJSON) Тогда
		Возврат Неопределено;
	КонецЕсли;

	ПоляДаты = Новый Массив;
	ПоляДаты.Добавить("CreationDate");
		
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(ТекстJSON);
	Возврат ПрочитатьJSON(ЧтениеJSON, , ПоляДаты);
	
КонецФункции

&НаКлиенте
Процедура ПолучитьСписокПроцессов(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПолученСписокПроцессов", ЭтотОбъект);
	ВнешняяКомпонента.НачатьВызовПолучитьСписокПроцессов(ОписаниеОповещения, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьПроцессы1С(Команда)

	ОписаниеОповещения = Новый ОписаниеОповещения("ПолученСписокПроцессов", ЭтотОбъект);
	ВнешняяКомпонента.НачатьВызовПолучитьСписокПроцессов(ОписаниеОповещения, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученСписокПроцессов(РезультатВызова, ПараметрыВызова, ДополнительныеПараметры) Экспорт
	
	Данные = ПрочитатьСтрокуJSON(РезультатВызова);
	Если ТипЗнч(Данные) = Тип("Массив") Тогда
		СписокПроцессов.Очистить();
		Для каждого Стр из Данные Цикл
			НоваяСтр = СписокПроцессов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтр, Стр);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ПолучитьДанныеПроцесса(Команда)
	
	ТекущиеДанные = Элементы.СписокПроцессов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат КонецЕсли;
	ОписаниеОповещения = Новый ОписаниеОповещения("ПолученыСвойстваОбъекта", ЭтотОбъект);
	ВнешняяКомпонента.НачатьВызовПолучитьСвойстваПроцесса(ОписаниеОповещения, ТекущиеДанные.ProcessId);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСнимокПроцесса(Команда)

	ТекущиеДанные = Элементы.СписокПроцессов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат КонецЕсли;
	ОписаниеОповещения = Новый ОписаниеОповещения("ПолученСнимок", ЭтотОбъект);
	ВнешняяКомпонента.НачатьВызовПолучитьСнимокПроцесса(ОписаниеОповещения, ТекущиеДанные.ProcessId);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученыСвойстваОбъекта(РезультатВызова, ПараметрыВызова, ДополнительныеПараметры) Экспорт
	
	Данные = ПрочитатьСтрокуJSON(РезультатВызова);
	Если ТипЗнч(Данные) = Тип("Структура") Тогда
		СвойстваОбъекта.Очистить();
		Для каждого КлючЗначение из Данные Цикл
			НоваяСтр = СвойстваОбъекта.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтр, КлючЗначение);
		КонецЦикла;
		Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаСвойстваОбъекта;
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ПолучитьСписокОкон(Команда)

	ОписаниеОповещения = Новый ОписаниеОповещения("ПолученСписокОкон", ЭтотОбъект);
	ВнешняяКомпонента.НачатьПолучениеСписокОкон(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученСписокОкон(Значение, ДополнительныеПараметры) Экспорт
	
	Данные = ПрочитатьСтрокуJSON(Значение);
	Если ТипЗнч(Данные) = Тип("Массив") Тогда
		СписокОкон.Очистить();
		Для каждого Стр из Данные Цикл
			ЗаполнитьЗначенияСвойств(СписокОкон.Добавить(), Стр);
		КонецЦикла;
		ОписаниеОповещения = Новый ОписаниеОповещения("ПолученоАктивноеОкно", ЭтотОбъект);
		ВнешняяКомпонента.НачатьПолучениеАктивноеОкно(ОписаниеОповещения);
	КонецЕсли;
	
	Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаСписокОкон;
	
КонецПроцедуры	

&НаКлиенте
Процедура ПолученоАктивноеОкно(Значение, ДополнительныеПараметры) Экспорт
	
	Для каждого Стр из СписокОкон.НайтиСтроки(Новый Структура("window", Значение)) Цикл
		Элементы.СписокОкон.ТекущаяСтрока = Стр.ПолучитьИдентификатор();
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОконПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.СписокОкон.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ИдентификаторПроцесса = "";
		ДескрипторОкна = 0;
		ЗаголовокОкна = "";
	Иначе
		ИдентификаторПроцесса = ТекущиеДанные.ProcessId;
		ДескрипторОкна = ТекущиеДанные.window;
		ЗаголовокОкна = ТекущиеДанные.title;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРазмер(ПозицияПоГоризонтали, ПозицияПоВертикали, РазмерПоГоризонтали, РазмерПоВертикали)

	ОписаниеОповещения = Новый ОписаниеОповещения("ПолученыСвойстваДисплея", ЭтотОбъект);
	ВнешняяКомпонента.НачатьВызовПолучитьСвойстваДисплея(ОписаниеОповещения, ДескрипторОкна);
	ВнешняяКомпонента.НачатьВызовУстановитьРазмерОкна(Новый ОписаниеОповещения, ДескрипторОкна, РазмерПоГоризонтали, РазмерПоВертикали);
	ВнешняяКомпонента.НачатьВызовРазрешитьИзменятьРазмер(Новый ОписаниеОповещения, ДескрипторОкна, НЕ ЗапретитьИзменятьРазмер);
	ВнешняяКомпонента.НачатьВызовАктивироватьОкно(Новый ОписаниеОповещения, ДескрипторОкна);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученыСвойстваДисплея(РезультатВызова, ПараметрыВызова, ДополнительныеПараметры) Экспорт
	
	Данные = ПрочитатьСтрокуJSON(РезультатВызова);
	Если ТипЗнч(Данные) = Тип("Структура") Тогда
		ВнешняяКомпонента.НачатьВызовУстановитьПозициюОкна(
			Новый ОписаниеОповещения, ДескрипторОкна, Данные.Left, Данные.Top
		);
	КонецЕсли;
	
КонецПроцедуры	

#Область ТипичныеРазмерыОкон

&НаКлиенте
Процедура ПроизвольныйРазмер(Команда)

	УстановитьРазмер(ПозицияПоГоризонтали, ПозицияПоВертикали, РазмерПоГоризонтали, РазмерПоВертикали);
	
КонецПроцедуры

&НаКлиенте
Процедура Размер800х600(Команда)
	УстановитьРазмер(0, 0, 800, 600);
КонецПроцедуры

&НаКлиенте
Процедура Размер960х720(Команда)
	УстановитьРазмер(0, 0, 960, 720);
КонецПроцедуры

&НаКлиенте
Процедура Размер1024х768(Команда)
	УстановитьРазмер(0, 0, 1024, 768);
КонецПроцедуры

&НаКлиенте
Процедура Размер1280х960(Команда)
	УстановитьРазмер(0, 0, 1280, 960);
КонецПроцедуры

&НаКлиенте
Процедура Широкий960х540(Команда)
	УстановитьРазмер(0, 0, 960, 540);
КонецПроцедуры

&НаКлиенте
Процедура Широкий1024х576(Команда)
	УстановитьРазмер(0, 0, 1024, 576);
КонецПроцедуры

&НаКлиенте
Процедура Широкий1280х720(Команда)
	УстановитьРазмер(0, 0, 1280, 720);
КонецПроцедуры

&НаКлиенте
Процедура Широкий1600х900(Команда)
	УстановитьРазмер(0, 0, 1600, 900);
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура СделатьСнимок(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПолученСнимок", ЭтотОбъект);
	ВнешняяКомпонента.НачатьВызовПолучитьСнимокОкна(ОписаниеОповещения, ДескрипторОкна);
	
КонецПроцедуры

&НаКлиенте
Процедура СнимокЭкрана(Команда)

	ОписаниеОповещения = Новый ОписаниеОповещения("ПолученСнимок", ЭтотОбъект);
	ВнешняяКомпонента.НачатьВызовПолучитьСнимокЭкрана(ОписаниеОповещения, 0);
	
КонецПроцедуры

&НаКлиенте
Процедура СнимокОкна(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПолученСнимок", ЭтотОбъект);
	ВнешняяКомпонента.НачатьВызовПолучитьСнимокЭкрана(ОписаниеОповещения, 1);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученСнимок(РезультатВызова, ПараметрыВызова, ДополнительныеПараметры) Экспорт
	
	ДанныеКартинки = ПоместитьВоВременноеХранилище(РезультатВызова, УникальныйИдентификатор);
	Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаКартинка;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗаголовокОкна(Команда)

	НовыйЗаголовок = Строка(Новый УникальныйИдентификатор);
	ВнешняяКомпонента.НачатьВызовУстановитьЗаголовок(Новый ОписаниеОповещения, ДескрипторОкна, НовыйЗаголовок);
	
КонецПроцедуры

&НаКлиенте
Процедура Активировать(Команда)
	
	ВнешняяКомпонента.НачатьВызовАктивироватьОкно(Новый ОписаниеОповещения, ДескрипторОкна);
	
КонецПроцедуры

&НаКлиенте
Процедура Распахнуть(Команда)

	ВнешняяКомпонента.НачатьВызовРаспахнутьОкно(Новый ОписаниеОповещения, ДескрипторОкна);
	
КонецПроцедуры

&НаКлиенте
Процедура Свернуть(Команда)
	
	ВнешняяКомпонента.НачатьВызовСвернутьОкно(Новый ОписаниеОповещения, ДескрипторОкна);
	
КонецПроцедуры

&НаКлиенте
Процедура Развернуть(Команда)

	ВнешняяКомпонента.НачатьВызовРазвернутьОкно(Новый ОписаниеОповещения, ДескрипторОкна);
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиКлиентТестирования(Команда)

	ОписаниеОповещения = Новый ОписаниеОповещения("ПолученКлиентТестирования", ЭтотОбъект);
	ВнешняяКомпонента.НачатьВызовНайтиКлиентТестирования(ОписаниеОповещения, ПортПодключения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученКлиентТестирования(РезультатВызова, ПараметрыВызова, ДополнительныеПараметры) Экспорт
	
	ДескрипторОкна = 0;
	СвойстваОбъекта.Очистить();
	Данные = ПрочитатьСтрокуJSON(РезультатВызова);
	Если ТипЗнч(Данные) = Тип("Структура") Тогда
		Данные.Свойство("ProcessId", ИдентификаторПроцесса);
		Данные.Свойство("Window", ДескрипторОкна);
		Данные.Свойство("Title", ЗаголовокОкна);
		Для каждого КлючЗначение из Данные Цикл
			НоваяСтр = СвойстваОбъекта.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтр, КлючЗначение);
		КонецЦикла;
		Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаСвойстваОбъекта;
	Иначе 
		ИдентификаторПроцесса = Неопределено;
		ДескрипторОкна = Неопределено;
		ЗаголовокОкна = Неопределено;
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ПолучитьСвойстваОкна(Команда)

	ОписаниеОповещения = Новый ОписаниеОповещения("ПолученыСвойстваОбъекта", ЭтотОбъект);
	ВнешняяКомпонента.НачатьВызовПолучитьСвойстваОкна(ОписаниеОповещения, ДескрипторОкна);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьРазмерОкна(Команда)

	ОписаниеОповещения = Новый ОписаниеОповещения("ПолученыСвойстваОбъекта", ЭтотОбъект);
	ВнешняяКомпонента.НачатьВызовПолучитьРазмерОкна(ОписаниеОповещения, ДескрипторОкна);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьОкнаПроцесса(Команда)

	ОписаниеОповещения = Новый ОписаниеОповещения("ПолученСписокОконПроцесса", ЭтотОбъект);
	ВнешняяКомпонента.НачатьВызовПолучитьСписокОкон(ОписаниеОповещения, ИдентификаторПроцесса);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученСписокОконПроцесса(РезультатВызова, ПараметрыВызова, ДополнительныеПараметры) Экспорт
	
	Данные = ПрочитатьСтрокуJSON(РезультатВызова);
	Если ТипЗнч(Данные) = Тип("Массив") Тогда
		СписокОкон.Очистить();
		Для каждого Стр из Данные Цикл
			ЗаполнитьЗначенияСвойств(СписокОкон.Добавить(), Стр);
		КонецЦикла;
	КонецЕсли;
	
	Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаСписокОкон;
	
КонецПроцедуры	

&НаКлиенте
Процедура ПолучитьСписокДисплеев(Команда)

	ОписаниеОповещения = Новый ОписаниеОповещения("ПолученСписокДисплеев", ЭтотОбъект);
	ВнешняяКомпонента.НачатьПолучениеСписокДисплеев(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученСписокДисплеев(Значение, ДополнительныеПараметры) Экспорт
	
	Данные = ПрочитатьСтрокуJSON(Значение);
	Если ТипЗнч(Данные) = Тип("Массив") Тогда
		СписокДисплеев.Очистить();
		Для каждого Стр из Данные Цикл
			НоваяСтр = СписокДисплеев.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтр, Стр);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ПолучитьСвойстваЭкрана(Команда)

	ОписаниеОповещения = Новый ОписаниеОповещения("ПолученыСвойстваЭкрана", ЭтотОбъект);
	ВнешняяКомпонента.НачатьПолучениеСвойстваЭкрана(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученыСвойстваЭкрана(Значение, ДополнительныеПараметры) Экспорт
	
	Данные = ПрочитатьСтрокуJSON(Значение);
	Если ТипЗнч(Данные) = Тип("Структура") Тогда
		СвойстваОбъекта.Очистить();
		Для каждого КлючЗначение из Данные Цикл
			Если ТипЗнч(КлючЗначение.Значение) = Тип("Структура") Тогда
				Для каждого КЗ из КлючЗначение.Значение Цикл
					НоваяСтр = СвойстваОбъекта.Добавить();
					НоваяСтр.Ключ = КлючЗначение.Ключ + "." + КЗ.Ключ;
					НоваяСтр.Значение = КЗ.Значение;
				КонецЦикла;
			Иначе
				ЗаполнитьЗначенияСвойств(СвойстваОбъекта.Добавить(), КлючЗначение);
			КонецЕсли;
		КонецЦикла;
		Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаСвойстваОбъекта;
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ПолучитьТекстИзБуфера(Команда)

	ОписаниеОповещения = Новый ОписаниеОповещения("ПолученТекстБуфераОбмена", ЭтотОбъект);
	ВнешняяКомпонента.НачатьПолучениеТекстБуфераОбмена(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура КопироватьТекстВБуфер(Команда)
	
	ВнешняяКомпонента.НачатьУстановкуТекстБуфераОбмена(, ТекстБуфераОбмена);

КонецПроцедуры

&НаКлиенте
Процедура ПолученТекстБуфераОбмена(Значение, ДополнительныеПараметры) Экспорт
	
	ТекстБуфераОбмена = Значение;
	
КонецПроцедуры	

&НаКлиенте
Процедура ПолучитьКартинкуИзБуфера(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПолученаКартинкаБуфераОбмена", ЭтотОбъект);
	ВнешняяКомпонента.НачатьПолучениеКартинкаБуфераОбмена(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученаКартинкаБуфераОбмена(Значение, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Значение) = Тип("ДвоичныеДанные") Тогда
		ДанныеКартинки = ПоместитьВоВременноеХранилище(Значение, УникальныйИдентификатор);
		Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаКартинка;
	КонецЕсли;
	
КонецПроцедуры	

&НаСервереБезКонтекста
Функция ПолучитьЛоготип1С(УникальныйИдентификатор)
	
	ФайлРесурса = "v8res://mngbase/About.lf";
	ВременныйФайл = ПолучитьИмяВременногоФайла();
	КопироватьФайл(ФайлРесурса, ВременныйФайл);
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.Прочитать(ВременныйФайл);
	УдалитьФайлы(ВременныйФайл);
	
	Стр = ТекстовыйДокумент.ПолучитьТекст();
	НачПоз = СтрНайти(Стр, "{#base64:");
	КонПоз = СтрНайти(Стр, "}", , НачПоз);
	Стр = Сред(Стр, НачПоз + 9, КонПоз - НачПоз - 9);
	ДвоичныеДанные = Base64Значение(Стр);
	
	Картинка = Новый Картинка(ДвоичныеДанные);
	Соответствие = Новый Соответствие;
	Соответствие.Вставить("screenDensity", "xdpi");
	ДвоичныеДанные = Картинка.ПолучитьДвоичныеДанные(Ложь, Соответствие);
	Возврат ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
	
КонецФункции
	
&НаКлиенте
Процедура КопироватьКартинкуВБуфер(Команда)
	
	АдресХранилища = ПолучитьЛоготип1С(УникальныйИдентификатор);
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресХранилища);
	ВнешняяКомпонента.НачатьУстановкуКартинкаБуфераОбмена(, ДвоичныеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ФорматБуфераОбмена(Команда)

	ОписаниеОповещения = Новый ОписаниеОповещения("ПолученТекстБуфераОбмена", ЭтотОбъект);
	ВнешняяКомпонента.НачатьПолучениеФорматБуфераОбмена(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьБуферОбмена(Команда)

	ВнешняяКомпонента.НачатьВызовОчиститьБуферОбмена(Новый ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТекст(Команда)
	
	ТекстБуфераОбмена = Формат(ТекущаяДата(), "ДЛФ=DDT");
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекст(Команда)
	
	ТекстБуфераОбмена = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура КопироватьСнимокВБуферОбмена(Команда)

	Если ПустаяСтрока(ДанныеКартинки) Тогда Возврат КонецЕсли;
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(ДанныеКартинки);
	ВнешняяКомпонента.НачатьУстановкуКартинкаБуфераОбмена(, ДвоичныеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ПаузаSleep(Команда)
	
	ТекДата = ТекущаяДата();
	ТекстБуфераОбмена = Формат(ТекДата, "ДЛФ=DDT");
	ОписаниеОповещения = Новый ОписаниеОповещения("ВызовПауза", ЭтотОбъект, ТекДата);
	ВнешняяКомпонента.НачатьВызовПауза(ОписаниеОповещения, 1000);
	
КонецПроцедуры

&НаКлиенте
Процедура ВызовПауза(РезультатВызова, ПараметрыВызова, ДополнительныеПараметры) Экспорт
	
	ТекстБуфераОбмена = Формат(ДополнительныеПараметры, "ДЛФ=DDT") + Символы.ПС + Формат(ТекущаяДата(), "ДЛФ=DDT");

КонецПроцедуры	

&НаКлиенте
Процедура ПолучитьПозициюКурсора(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПолученаПозицияКурсора", ЭтотОбъект);
	ВнешняяКомпонента.НачатьВызовПолучитьПозициюКурсора(ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ПолученаПозицияКурсора(РезультатВызова, ПараметрыВызова, ДополнительныеПараметры) Экспорт
	
	Данные = ПрочитатьСтрокуJSON(РезультатВызова);
	Если ТипЗнч(Данные) = Тип("Структура") Тогда
		ПозицияКурсораX = Данные.X;
		ПозицияКурсораY = Данные.Y;
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура УстановитьПозициюКурсора(Команда)
	
	ВнешняяКомпонента.НачатьВызовУстановитьПозициюКурсора(Новый ОписаниеОповещения, ПозицияКурсораX, ПозицияКурсораY);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьБраузер(Команда)
	
	СтрокаКоманды = """" + ИнтернетБраузер + """ about:blank --remote-debugging-port=" + Формат(ПортБраузера, "ЧГ=");
	НачатьЗапускПриложения(Новый ОписаниеОповещения, СтрокаКоманды);
	
КонецПроцедуры

&НаКлиенте
Процедура ИнтернетБраузерНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбранФайлБраузера", ЭтотОбъект);
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;
	ДиалогВыбораФайла.МножественныйВыбор = Ложь;
	ДиалогВыбораФайла.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбранФайлБраузера(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(ВыбранныеФайлы) = Тип("Массив") Тогда
		Для каждого ЭлементМассива из ВыбранныеФайлы Цикл
			ИнтернетБраузер = ЭлементМассива;
			Прервать;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаголовокКоманды(ИмяКоманды)
	
	Возврат Команды.Найти(ИмяКоманды).Заголовок;
	
КонецФункции	

&НаКлиенте
Процедура ОшибкаБраузера(Команда)
	
	ИнформационныйТекст = 
	"Перед вызовом команды «" + ЗаголовокКоманды(Команда.Имя) + "»
	|закройте все открытые окна Google Chrome
	|и запустите снова кнопкой «Запустить браузер».";
	ПоказатьПредупреждение(, ИнформационныйТекст, 10);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьURL(Команда)

	HTTPЗапрос = Новый HTTPЗапрос("/json/new?" + АдресВебКлиента);
	HTTPСоединение = Новый HTTPСоединение("localhost", 9222, , , , 10);
	Попытка
		HTTPОтвет = HTTPСоединение.Получить(HTTPЗапрос);
	Исключение
		ОшибкаБраузера(Команда);
		Возврат;
	КонецПопытки;
	ТекстJSON = HTTPОтвет.ПолучитьТелоКакСтроку();
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ТекстJSON);
	ДанныеJSON = ПрочитатьJSON(ЧтениеJSON);
	АдресВебСокет = ДанныеJSON.webSocketDebuggerUrl;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьJavaSctipt(Команда)
	
	ПараметрыМетода = Новый Структура("expression", ТекстJavaScript);
	ДанныеJSON = Новый Структура("id,method,params", 1, "Runtime.evaluate", ПараметрыМетода);
	ЗаписьJSON = новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, ДанныеJSON);
	КомандаJSON = ЗаписьJSON.Закрыть();

	ОписаниеОповещения = Новый ОписаниеОповещения("ВызовJavaSctipt", ЭтотОбъект);
	ВнешняяКомпонента.НачатьВызовВебСокет(ОписаниеОповещения, АдресВебСокет, КомандаJSON);
	
КонецПроцедуры

&НаКлиенте
Процедура ВызовJavaSctipt(РезультатВызова, ПараметрыВызова, ДополнительныеПараметры) Экспорт
	
	РезультатJSON = РезультатВызова;
	
КонецПроцедуры	

&НаКлиенте
Процедура СнимокЭкранаБраузера(Команда)
	
	ПараметрыМетода = Новый Структура("format,quality,fromSurface", "png", 85, Ложь);
	ДанныеJSON = Новый Структура("id,method,params", 1, "Page.captureScreenshot", ПараметрыМетода);

	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, ДанныеJSON);
	КомандаJSON = ЗаписьJSON.Закрыть();
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПолученСнимокБраузера", ЭтотОбъект);
	ВнешняяКомпонента.НачатьВызовВебСокет(ОписаниеОповещения, АдресВебСокет, КомандаJSON);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученСнимокБраузера(РезультатВызова, ПараметрыВызова, ДополнительныеПараметры) Экспорт
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(РезультатВызова);
	ДанныеJSON = ПрочитатьJSON(ЧтениеJSON);
	Если ДанныеJSON.Свойство("result") Тогда
		ДвоичныеДанные = Base64Значение(ДанныеJSON.result.data);
		ДанныеКартинки = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
		Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаКартинка;
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ВызватьМетодDevTools(Команда)

	ОписаниеОповещения = Новый ОписаниеОповещения("ВызовJavaSctipt", ЭтотОбъект);
	ВнешняяКомпонента.НачатьВызовВебСокет(ОписаниеОповещения, АдресВебСокет, КомандаJSON);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭмуляцияВвода(Команда)

	Текст = Формат(ТекущаяДата(), "ДЛФ=DDT");
	Если Не ПустаяСтрока(ТекстБуфераОбмена) Тогда
		Текст = Символы.ПС + Текст;
	КонецЕсли;
	ТекущийЭлемент = Элементы.ТекстБуфераОбмена;
	ВнешняяКомпонента.НачатьВызовЭмуляцияВводаТекста(Новый ОписаниеОповещения, Текст, 0);
	
КонецПроцедуры
